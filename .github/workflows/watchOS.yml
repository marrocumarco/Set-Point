name: watchOS build & test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build and Test watchOS app
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Scheme
        run: |
          default="SetPoint Watch App"
          echo $default | cat >default
          device="Apple Watch SE (40mm) (2nd generation)"
          echo $device | cat >device_file
          arch="arm64"
          echo $arch | cat >arch_file
          echo Using scheme: $default
          echo Using device: $device
          echo Using arch: $arch
          
      - name: Build (watchOS)
        env:
          scheme: ${{ 'default' }}
        run: |
          # trova un Apple Watch simulator preferendo la versione OS richiesta ($OS), altrimenti il primo disponibile
          OS=${OS:-11.5}   # fallback se $OS non Ã¨ impostata
          uuid=$(xcrun simctl list devices | grep -E "Apple Watch.*\($OS\)" | head -n1 | grep -oE '[0-9A-F-]{36}')
          if [ -z "$uuid" ]; then
            uuid=$(xcrun simctl list devices | grep -E "Apple Watch" | head -n1 | grep -oE '[0-9A-F-]{36}')
          fi

          if [ -z "$uuid" ]; then
            echo "Nessun simulatore Apple Watch trovato!"
            xcrun xctrace list devices
            exit 1
          fi

          echo "Using simulator id: $uuid"
          DERIVED_DATA="$PWD/DerivedData"
          mkdir -p "$DERIVED_DATA"

          xcodebuild test \
          -scheme "$scheme" \
          -"$filetype_parameter" "$file_to_build" \
          -sdk watchsimulator \
          -destination "id=$uuid" \
          -derivedDataPath "$DERIVED_DATA" \
          -enableCodeCoverage YES

      #- name: Test (watchOS)
      #  env:
      #    scheme: ${{ 'default' }}
      #    platform: ${{ 'watchOS Simulator' }}
      #    device: ${{ 'device' }}
      #    arch: ${{ 'arch_file' }}
      #  run: |
      #    OS="11.5"
      #    if [ $scheme = default ]; then scheme=$(cat default); fi
      #    if [ $device = device_file ]; then device=$(cat device_file); fi
      #    if [ $arch = arch_file ]; then arch=$(cat arch_file); fi
      #    if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #    file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #    echo "Testing scheme: $scheme on device: $device"
      #    xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device,OS=$OS,arch=$arch"
